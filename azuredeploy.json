{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "nameRoot": {
      "type": "string",
      "metadata": {
        "description": "Name of the virtual machine"
      },
      "defaultValue": "[concat('vm-', take(resourceGroup().name,12))]"
    },
    "subscriptionId": {
      "type": "string",
      "metadata": {
        "description": "Your Azure Subscription Id"
      },
      "defaultValue": "[subscription().subscriptionId]"
    },
    "gitHubUser": {
      "type": "string",
      "metadata": {
        "description": "Your GitHub username"
      },
      "defaultValue": "tescales"
    },
    "gitHubRepo": {
      "type": "string",
      "metadata": {
        "description": "Your GitHub username"
      },
      "defaultValue": "azure-scaffold"
    },
    "userObjectId": {
      "type": "string",
      "metadata": {
        "description": "Your User ObjectId"
      }
    },
    "aadTenantId": {
      "type": "string",
      "metadata": {
        "description": "Your AzureAD TenantId"
      },
      "defaultValue": "[subscription().tenantId]"
    }
  },
  "variables": {
    "ghURL": "[concat('https://raw.githubusercontent.com/', parameters('gitHubUser'), '/', parameters('gitHubRepo'), '/master')]",
    "storageAccountName": "[take(toLower( replace( concat( resourceGroup().name, 'scrt'), '-', '') ),23)]",
    "contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "roleAssignmentId": "[guid(resourceGroup().id)]",
    "cgName": "[concat('deploy', take(toLower( replace( concat( resourceGroup().name, 'scrt'), '-', '') ),23))]",
    "storageAccountShare": "scripts",
    "bootStrapCmd": "az ad sp create-for-rbac -n app-$RESOURCE_GROUP > rbac.json; jq -r 'appId --value \\(.appId),tenantId --value \\(.tenant),password --value \\(.password)' rbac.json",
    "automationName": "[parameters('nameRoot')]",
    "automationUser": "username",
    "automationPass": "password",
    "keyVaultName": "[parameters('nameRoot')]",
    "keyVaultDeployUri": "[concat(variables('ghURL'), '/templates/keyvault/azuredeploy.json')]",
    "keyVaultURL": "[concat('https://', variables('keyVaultName'), '.vault.azure.net/')]",
    "keyVaultResourceID": "[concat(subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
    "regionId": "[resourceGroup().location]",
    "automationAcctDeployUri": "[concat(variables('ghURL'), '/templates/automation/azuredeploy.json')]",
    "dscDeployUri": "[concat(variables('ghURL'), '/templates/dsc/azuredeploy.json')]",
    "setupChocolatelyScriptLocation": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/visual-studio-dev-vm-chocolatey/scripts/",
    "setupChocolateyScriptFileName": "SetupChocolatey.ps1",
    "chocoPackages": "boxstarter,googlechrome,adobereader,notepadplusplus.install",
    "chocoScript": "https://chocolatey.org/install.ps1",
    "chocoScriptFile": "install.ps1"
  },
  "resources": [
    {
      "name": "[variables('StorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "description": "Used for Script Storage"
      },
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {}
    },
    {
      "name": "[variables('cgName')]",
      "type": "Microsoft.ContainerInstance/containerGroups",
      "apiVersion": "2018-10-01",
      "location": "[resourcegroup().location]",
      "dependsOn": [
        "[variables('storageAccountName')]"
      ],
      "comments": "",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "containers": [
          {
            "name": "bootstrapper",
            "properties": {
              "image": "microsoft/azure-cli",
              "command": [
                "/bin/bash",
                "-c",
                "chmod +x /code/$GITHUB_REPO/bootstrap/bootstrap.sh; /code/$GITHUB_REPO/bootstrap/bootstrap.sh"
              ],
              "volumeMounts": [
                {
                  "name": "git-volume",
                  "mountPath": "/code"
                }
              ],
              "environmentVariables": [
                {
                  "name": "AZURE_STORAGE_KEY",
                  "securevalue": "[listKeys(variables('storageAccountName'),'2017-10-01').keys[0].value]"
                },
                {
                  "name": "AZURE_STORAGE_ACCOUNT",
                  "value": "[variables('storageAccountName')]"
                },
                {
                  "name": "GITHUB_REPO",
                  "value": "[parameters('gitHubRepo')]"
                },
                {
                  "name": "RESOURCE_GROUP",
                  "value": "[resourceGroup().name]"
                }
              ],
              "resources": {
                "requests": {
                  "cpu": "1",
                  "memoryInGb": "1"
                }
              }
            }
          }
        ],
        "restartPolicy": "Never",
        "osType": "Linux",
        "volumes": [
          {
            "name": "git-volume",
            "gitRepo": {
              "repository": "[concat('https://github.com/', parameters('gitHubUser'), '/', parameters('gitHubRepo'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2017-09-01",
      "name": "[variables('roleAssignmentId')]",
      "dependsOn": [
          "[concat('Microsoft.ContainerInstance/containerGroups/', variables('cgName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
        "principalId": "[reference(concat('Microsoft.ContainerInstance/containerGroups/', variables('cgName')), '2018-10-01', 'Full').identity.principalId]",
        "scope": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name)]"
      }
    }
  ],
  "outputs": {}
}